#HA Proxy Config
global
 log localhost local2
 daemon
 maxconn 4096
    # Default ciphers to use on SSL-enabled listening sockets.
    ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL
    ssl-server-verify none

defaults
 mode http
 #enable log
 option httplog
 option http-buffer-request
 option forwardfor
 option http-server-close
 option accept-invalid-http-request
 #ignore bad reqest CR-- error because of preconnect connection
 option http-ignore-probes
 log global
 #timeput configuration
 timeout connect 50000ms
 timeout client 450000ms
 timeout server 450000ms
#stats monitor configuration
listen stats
 bind *:9999
 stats enable
 stats hide-version
 stats uri /stats
 stats auth admin:admin@123

frontend requestRouter
 bind *:443  ssl crt /etc/haproxy/cert/server.pem

#uncomment for log the body parameters.
#by default is disable, because of secuirty and performance
# declare capture request len 40000
# http-request capture req.body id 0
# log-format %f/%H/%fi:%fp\ GMT:%T\\nrequest:%r\r\nbody:%[capture.req.hdr(0)]\

 #trying to get the txId from the url parameter
 #logic - take the url, remove all the '@', change the txId= to the '@' place holder, split by '@' and take the second element (txId value),
 # split with & (handle the case that there are more url variable), take the first element, do crc32 function on the txId value
 http-request set-var(req.urlTxidCrc) capture.req.uri,regsub(@,,g),regsub(txId=,@),field(2,'@'),field(1,'&'),crc32
 #compute the txId and the result determinate what server it should be
 http-request set-var(req.urlSrvrNum) var(req.urlTxidCrc),mod(2)

 #take txId from body in general post
 http-request set-var(req.bodySrvrNum) req.body_param(txId),crc32,mod(2)

 #take txId from body in inQuery case
 http-request set-var(req.bodyInQuerySrvrNum) req.body_param(mpiTransactionId),crc32,mod(2)

 #put in the parameter the result what server the load balancer should redirect
 acl isTxidNotExistInUrl var(req.urlTxidCrc) eq 0
 acl urlZeroSrvr var(req.urlSrvrNum) eq 0 
 acl bodyZeroSrvr var(req.bodySrvrNum) eq 0
 acl inQueryZeroSrvr var(req.bodyInQuerySrvrNum) eq 0
 acl urlOneSrvr var(req.urlSrvrNum) eq 1
 acl bodyOneSrvr var(req.bodySrvrNum) eq 1
 acl inQueryOneSrvr var(req.bodyInQuerySrvrNum) eq 1

 acl isTxidExistInBody req.body_param(txId) -m found
 acl isTransaction path_sub CreateTransaction CreateTransactionExtended

 acl isInQuery path_sub CGMPIQuery
 acl isTxidExistInInQueryBody req.body_param(mpiTransactionId) -m found

 #go to the relevant backend
 use_backend zeroServer if bodyZeroSrvr isTxidExistInBody

 use_backend oneServer if bodyOneSrvr

 use_backend transactionBalance if isTxidNotExistInUrl isTransaction

 use_backend zeroServer if urlZeroSrvr !isTxidNotExistInUrl

 use_backend oneServer if urlOneSrvr !isTxidNotExistInUrl
 
 use_backend zeroServer if isInQuery inQueryZeroSrvr isTxidExistInInQueryBody

 use_backend oneServer if isInQuery inQueryOneSrvr

 default_backend defaultBalance

backend defaultBalance
 balance roundrobin
 server mpi0-staticData 172.16.100.16:443 check ssl
 server mpi1-staticData 172.16.100.17:443 check ssl

backend transactionBalance
 balance roundrobin
 server mpi0-withoutTxid 172.16.100.16:443 check ssl
 server mpi1-withoutTxid 172.16.100.17:443 check ssl

backend zeroServer
 balance roundrobin
 server mpi0 172.16.100.16:443 check ssl

backend oneServer
 balance roundrobin
 server mpi1 172.16.100.17:443 check ssl
